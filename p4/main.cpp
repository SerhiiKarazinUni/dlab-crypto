#include <iostream>
#include <cmath>

long double round_up(long double value, int decimal_places) {
    const long double multiplier = std::pow(10.0, decimal_places);
    return std::ceil(value * multiplier) / multiplier;
}

bool monobit_test(const uint8_t *input, const uint16_t input_len) {
    bool result = true;

    uint16_t num_set_bits = 0;
    uint16_t num_nonset_bits = 0;
    uint16_t threshold_lo = 9654;
    uint16_t threshold_hi = 10346;

    for (uint16_t i = 0; i < input_len; i++) { // for each byte of input...
        uint8_t byte = input[i];

        for (uint8_t k = 0; k < 8; k++) { // for each bit in current input byte...
            if ((byte & 1) == 1) {
                num_set_bits++;
            } else {
                num_nonset_bits++;
            }
            byte >>= 1;
        }
    }

    std::cout << "===[ 1. Monobit test ]===" << std::endl;
    std::cout << "0 bits     : " << num_nonset_bits << std::endl;
    std::cout << "(should be): " << "9865" << std::endl;
    std::cout << "1 bits     : " << num_set_bits << std::endl;
    std::cout << "(should be): " << "10135" << std::endl << std::endl;
    bool is_passed = num_set_bits > threshold_lo && num_set_bits < threshold_hi;
    if (!is_passed) { result = false; }
    std::cout << "Test 0 bits: "
              << (is_passed ? "PASSED" : "NOT PASSED") << std::endl;
    is_passed = num_nonset_bits > threshold_lo && num_nonset_bits < threshold_hi;
    if (!is_passed) { result = false; }
    std::cout << "Test 1 bits: "
              << (is_passed ? "PASSED" : "NOT PASSED")
              << std::endl << std::endl;

    return result;
}

bool longest_series_len_test(const uint8_t *input, const uint16_t input_len) {
    bool result = true;

    uint16_t longest_seq_len = 0;
    uint16_t longest_seq_byte = 0;
    uint16_t current_seq_len = 0;
    bool is_last_bit_set = (input[input_len - 1] & 1) == 1; // set this flag to 1st bit value to start counting asap

    // note: it's easier to go from the end as we're always looking into the rightmost bit
    for (int16_t i = input_len - 1; i >= 0; i--) { // for each byte of input...
        uint8_t byte = input[i];

        for (uint8_t k = 0; k < 8; k++) { // for each bit in current input byte...
            if (((byte & 1) == 1) != is_last_bit_set) {  //if current bit is opposite to the stored one
                is_last_bit_set = (byte & 1) == 1;
                if (current_seq_len > longest_seq_len) {
                    longest_seq_len = current_seq_len;
                    longest_seq_byte = i + current_seq_len / 8;
                }
                current_seq_len = 1;
            } else {
                current_seq_len++;
            }
            byte >>= 1;
        }
    }

    // count last series
    if (current_seq_len > longest_seq_len) {
        longest_seq_len = current_seq_len;
        longest_seq_byte = 0;
    }

    std::cout << "===[ 2. Longest series length test ]===" << std::endl;
    std::cout << "Longest series length: " << longest_seq_len << " bits (at byte " << longest_seq_byte << ")"
              << std::endl;
    std::cout << "(should be)          : " << "14 bits" << std::endl << std::endl;
    bool is_passed = longest_seq_len <= 36;
    if (!is_passed) { result = false; }
    std::cout << "Test series length   : " << (is_passed ? "PASSED" : "NOT PASSED") << std::endl << std::endl;

    return result;
}

bool poker_test(const uint8_t *input, const uint16_t input_len) {
    bool result = true;

    auto *series_counters = new uint16_t[16];
    memset(series_counters, 0x00, 16);

    for (uint16_t i = 0; i < input_len; i++) { // for each byte of input...
        uint8_t byte = input[i];

        // split each byte into two halves - it will be poker hands
        uint8_t tetrad1 = 0x00;
        uint8_t tetrad2 = 0x00;
        std::memcpy(&tetrad1, &byte, 1);
        std::memcpy(&tetrad2, &byte, 1);
        tetrad1 = tetrad1 & ~0xF;
        tetrad2 = tetrad2 & ~0xF0;

        // shift this hand right, so it will create the same value as 2nd hand
        tetrad1 = tetrad1 >> 4;

        // count them
        series_counters[tetrad1] += 1;
        series_counters[tetrad2] += 1;
    }

    long double sum_sq_series_counters = 0;
    for (uint8_t i = 0; i < 16; i++) {
        sum_sq_series_counters += pow(series_counters[i], 2);
    }

    delete[] series_counters;

    long double chi = sum_sq_series_counters;
    chi *= 16.0 / 5000.0;
    chi -= 5000;

    std::cout << "===[ 3. Poker test ]===" << std::endl;
    std::cout << "Chi value is: " << round_up(chi, 4) << std::endl;
    std::cout << "(should be) : " << "19.9425" << std::endl << std::endl;
    bool is_passed = chi > 1.03 && chi < 57.4;
    if (!is_passed) { result = false; }
    std::cout << "Poker test  : " << (is_passed ? "PASSED" : "NOT PASSED") << std::endl << std::endl;

    return result;
}

bool series_len_test(const uint8_t *input, const uint16_t input_len) {
    bool result = true;

    bool is_last_bit_set =
            (input[input_len - 1] & 1) == 1;  // set this flag to the 1st bit value to start counting asap
    uint16_t current_seq_len = 0;

    auto *series_counters = new uint16_t[7];
    memset(series_counters, 0x00, 7);

    for (int16_t i = input_len - 1; i >= 0; i--) { // for each byte of input...
        uint8_t byte = input[i];

        for (uint8_t k = 0; k < 8; k++) { // for each bit in current input byte...
            if (((byte & 1) == 1) != is_last_bit_set) { //if current bit is opposite to the stored one
                is_last_bit_set = (byte & 1) == 1;
                if (current_seq_len > 6) {
                    current_seq_len = 6;
                }
                series_counters[current_seq_len] += 1;
                current_seq_len = 1;
            } else {
                current_seq_len++;
            }
            byte >>= 1;
        }
    }

    // count last sequence
    if (current_seq_len > 6) {
        current_seq_len = 6;
    }
    series_counters[current_seq_len] += 1;

    const uint16_t *thresholds_min = new uint16_t[]{
            0,
            2267,
            1079,
            502,
            223,
            90,
            90
    };

    const uint16_t *thresholds_max = new uint16_t[]{
            0,
            2733,
            1421,
            748,
            402,
            223,
            223
    };

    const uint16_t *should_be = new uint16_t[]{
            0,
            5058,
            2554,
            1244,
            574,
            329,
            307
    };

    std::cout << "===[ 4. Series length test ]===" << std::endl;
    std::cout << "Counters by series length:" << std::endl;
    for (uint8_t i = 1; i < 7; i++) {
        std::printf("series length = %d%s: %d (pcs.) - ", i, (i == 6 ? "+" : " "), series_counters[i]);
        bool is_passed = (series_counters[i] > thresholds_min[i]) && (series_counters[i] < thresholds_max[i]);
        if (!is_passed) { result = false; }
        std::cout << (is_passed ? "PASSED" : "NOT PASSED") << " [" << thresholds_min[i] << "~" << thresholds_max[i]
                  << "]" << std::endl;
        std::printf("should be on l= %d%s: %d (pcs.)\n\n", i, (i == 6 ? "+" : " "), should_be[i]);
    }

    delete[] series_counters;
    delete[] thresholds_min;
    delete[] thresholds_max;
    delete[] should_be;

    return result;
}

int main() {
    // you may provide your own input data here
    // this random data block was generated by https://gchq.github.io/CyberChef ("pseudo-random number generator" recipe)
    const uint8_t *input = new uint8_t[]{
/*offsets*/ 67, 142, 208, 184, 168, 137, 136, 40, 114, 203, 86, 230, 174, 211, 243, 83, 27, 71, 6, 175, 25, 106,
            223, 179, 104, 166, 84, 122, 20, 204, 161, 205, 175, 191, 244, 210, 89, 127, 15, 151, 223, 159, 223,
            99, 251, 139, 217, 27, 32, 232, 154, 252, 208, 227, 67, 243, 133, 55, 194, 85, 168, 85, 208, 110, 127,
            45, 24, 52, 28, 173, 149, 129, 134, 56, 63, 38, 249, 90, 47, 43, 163, 190, 113, 104, 200, 56, 44, 85,
            228, 77, 34, 221, 141, 210, 167, 70, 176, 179, 237, 74, 8, 219, 213, 230, 254, 188, 25, 223, 52, 58, 99,
            /*113*/ 134, 227, 115, 46, 182, 24, 193, 109, 252, 211, 191, 107, 138, 135, 217, 41, 189, 160, 64, 187, 209,
            114, 151, 239, 139, 26, 224, 95, 225, 162, 185, 32, 97, 99, 156, 28, 231, 199, 6, 74, 160, 230, 111,
            36, 201, 25, 8, 1, 77, 132, 170, 189, 47, 36, 230, 42, 108, 108, 230, 52, 187, 184, 203, 89, 41, 13,
            57, 127, 228, 184, 50, 148, 106, 138, 220, 21, 30, 26, 163, 155, 143, 155, 124, 66, 220, 231, 93, 134,
            209, 237, 66, 79, 220, 238, 69, 221, 199, 224, 242, 150, 98, 37, 218, 51, 78, 181, 43, 9, 248, 65, 45,
            91, 82, 93, 56, 132, 211, 177, 56, 125, 27, 178, 182, 0, 231, 122, 80, 42, 177, 190, 29, 177, 87, 153,
            31, 14, 126, 0, 117, 188, 152, 160, 72, 45, 247, 28, 151, 185, 116, 207, 190, 77, 32, 62, 108, 41, 165,
            /*270*/ 128, 252, 183, 215, 198, 94, 192, 56, 178, 38, 103, 58, 193, 119, 47, 234, 79, 30, 186, 183, 165, 244,
            148, 73, 130, 47, 123, 66, 152, 207, 46, 169, 61, 74, 12, 36, 6, 52, 221, 117, 58, 69, 45, 158, 133,
            209, 105, 7, 186, 16, 184, 153, 34, 6, 37, 78, 120, 27, 84, 123, 107, 245, 218, 28, 249, 191, 128, 250,
            63, 166, 113, 140, 176, 204, 119, 226, 211, 7, 230, 232, 212, 120, 45, 63, 150, 178, 226, 77, 92, 35,
            191, 108, 96, 29, 97, 238, 120, 6, 238, 137, 180, 192, 146, 133, 197, 122, 235, 215, 12, 11, 2, 118,
            /*381*/ 207, 213, 76, 81, 178, 128, 26, 25, 51, 12, 67, 117, 78, 103, 191, 23, 205, 206, 21, 9, 10, 139, 179, 19,
            112, 84, 199, 86, 209, 126, 166, 94, 240, 165, 141, 229, 37, 62, 124, 254, 115, 186, 16, 3, 182, 7,
            18, 30, 147, 194, 118, 54, 7, 129, 133, 134, 177, 82, 108, 71, 157, 86, 23, 234, 179, 79, 104, 191, 182,
            86, 123, 26, 17, 48, 136, 21, 114, 68, 241, 3, 164, 208, 105, 211, 108, 206, 59, 44, 117, 185, 161,
            176, 96, 21, 67, 85, 162, 19, 20, 166, 203, 95, 64, 21, 3, 74, 35, 150, 27, 165, 249, 103, 185, 181, 5,
            93, 111, 101, 17, 14, 24, 254, 83, 60, 154, 192, 106, 169, 143, 241, 161, 202, 243, 145, 127, 253, 47,
            /*519*/ 165, 240, 179, 141, 27, 229, 168, 48, 69, 74, 251, 152, 231, 88, 232, 192, 158, 74, 147, 116, 40, 151,
            22, 155, 117, 249, 45, 37, 211, 53, 137, 103, 29, 148, 100, 134, 187, 81, 1, 76, 170, 46, 57, 165, 217,
            135, 108, 246, 19, 87, 4, 34, 57, 114, 161, 211, 99, 94, 137, 22, 19, 163, 229, 137, 6, 6, 36, 85, 29,
            186, 55, 240, 35, 148, 34, 226, 241, 35, 194, 202, 107, 187, 143, 135, 186, 196, 251, 96, 26, 227,
            113, 106, 107, 174, 28, 110, 212, 74, 2, 9, 225, 87, 72, 192, 92, 88, 190, 116, 98, 74, 191, 255, 72, 175,
            239, 208, 248, 189, 125, 28, 16, 175, 177, 86, 118, 149, 145, 247, 100, 90, 13, 238, 214, 117, 117,
            255, 225, 132, 138, 211, 57, 138, 216, 121, 157, 153, 136, 184, 194, 13, 58, 44, 167, 132, 204, 145,
            167, 187, 59, 190, 6, 144, 95, 36, 56, 27, 59, 115, 177, 218, 97, 104, 140, 110, 95, 67, 196, /*695->*/ 96, 0,
            73, 82, 33, 96, 20, 166, 79, 181, 218, 21, 115, 36, 192, 50, 65, 231, 37, 165, 71, 184, 150, 61, 165, 220,
            67, 235, 158, 189, 60, 229, 160, 149, 122, 77, 148, 146, 100, 177, 59, 193, 175, 142, 71, 196, 30,
            115, 30, 69, 5, 19, 41, 254, 252, 57, 251, 247, 217, 78, 255, 238, 194, 249, 154, 219, 94, 229, 54, 22,
            137, 128, 126, 33, 163, 245, 193, 53, 233, 101, 190, 155, 28, 54, 93, 144, 238, 140, 2, 216, 83, 156,
            132, 35, 12, 0, 118, 111, 162, 12, 163, 231, 34, 238, 184, 4, 99, 183, 246, 242, 239, 220, 154, 235,
            235, 245, 151, 121, 46, 4, 184, 155, 192, 190, 193, 127, 199, 98, 32, 66, 247, 217, 83, 125, 108, 194,
            227, 141, 245, 96, 111, 142, 239, 101, 162, 177, 7, 1, 85, 29, 205, 232, 214, 156, 123, 131, 89, 76,
            219, 243, 101, 245, 131, 32, 252, 30, 178, 253, 134, 91, 147, 109, 4, 60, 229, 198, 160, 208, 87, 34,
            124, 87, 166, 139, 91, 201, 86, 116, 255, 182, 70, 190, 181, 169, 124, 36, 128, 158, 179, 120, 252,
            223, 48, 6, 107, 105, 119, 200, 239, 206, 200, 78, 172, 31, 232, 172, 212, 184, 20, 23, 139, 64, 170,
            126, 203, 142, 236, 5, 5, 157, 5, 104, 123, 151, 179, 220, 50, 48, 145, 213, 158, 164, 6, 173, 94, 39,
            215, 165, 97, 30, 5, 40, 118, 21, 7, 236, 253, 217, 232, 3, 124, 80, 217, 186, 223, 3, 121, 159, 39, 5,
            124, 193, 203, 117, 78, 148, 53, 180, 38, 43, 17, 177, 205, 136, 79, 157, 118, 153, 244, 134, 155, 99,
            124, 91, 127, 210, 22, 227, 70, 251, 27, 138, 202, 8, 115, 134, 232, 134, 229, 201, 104, 201, 235, 80,
            235, 227, 223, 83, 242, 246, 254, 185, 104, 158, 10, 38, 253, 5, 80, 247, 130, 137, 236, 223, 90, 237,
            /*1032*/184, 217, 133, 249, 182, 226, 159, 45, 152, 169, 225, 136, 19, 240, 90, 101, 182, 175, 55, 231, 253,
            42, 251, 161, 67, 204, 218, 25, 78, 93, 30, 41, 172, 81, 125, 108, 202, 21, 103, 17, 128, 213, 151,
            14, 146, 224, 234, 150, 109, 166, 176, 95, 102, 187, 58, 189, 23, 69, 19, 123, 211, 181, 185, 6, 74,
            252, 81, 178, 253, 163, 11, 242, 171, 239, 251, 25, 154, 38, 44, 31, 142, 163, 172, 104, 1, 192, 156,
            95, 210, 97, 96, 90, 164, 127, 74, 143, 73, 155, 53, 17, 55, 177, 249, 229, 50, 66, 155, 17, 120, 53, 47,
            82, 124, 72, 177, 22, 190, 158, 221, 157, 97, 172, 190, 18, 4, 26, 226, 238, 142, 9, 32, 166, 158, 26,
            171, 237, 1, 77, 146, 110, 195, 78, 27, 69, 75, 246, 24, 127, 171, 135, 66, 94, 102, 234, 211, 242,
            14, 168, 47, 47, 149, 124, 44, 160, 22, 228, 60, 166, 6, 92, 197, 37, 167, 43, 165, 230, 252, 130, 80,
            235, 32, 138, 103, 254, 71, 67, 109, 56, 249, 232, 215, 35, 7, 118, 26, 152, 7, 163, 46, 233, 173, 80,
            187, 46, 148, 154, 181, 11, 238, 42, 5, 63, 77, 38, 224, 73, 123, 40, 90, 213, 43, 63, 170, 177, 200, 18,
            38, 173, 78, 109, 213, 212, 196, 215, 91, 10, 197, 199, 251, 239, 251, 178, 37, 28, 251, 179, 168,
            235, 102, 203, 232, 199, 212, 95, 213, 69, 111, 89, 131, 213, 57, 56, 62, 74, 97, 168, 210, 202, 86, 35,
            35, 100, 215, 200, 126, 173, 114, 82, 80, 52, 42, 141, 3, 23, 86, 199, 154, 23, 244, 137, 203, 153,
            52, 101, 223, 226, 205, 105, 76, 232, 192, 5, 220, 2, 245, 30, 53, 1, 201, 112, 0, 214, 208, 69, 33, 61,
            95, 105, 220, 88, 11, 36, 242, 181, 58, 103, 101, 104, 212, 137, 216, 201, 121, 19, 221, 15, 194, 113,
            25, 167, 178, 42, 164, 13, 242, 197, 59, 112, 79, 220, 106, 107, 22, 237, 250, 6, 231, 200, 157, 105,
            247, 114, 212, 18, 171, 185, 160, 161, 131, 127, 207, 25, 44, 75, 21, 117, 215, 159, 41, 25, 49, 191,
            231, 177, 199, 152, 54, 112, 125, 186, 98, 199, 211, 137, 170, 162, 78, 97, 186, 225, 202, 29, 255,
            46, 101, 235, 194, 13, 44, 116, 47, 244, 190, 237, 135, 134, 37, 108, 93, 150, 205, 141, 167, 54, 18,
            165, 166, 237, 105, 211, 54, 214, 111, 18, 104, 64, 128, 103, 5, 165, 99, 254, 255, 166, 177, 187, 237,
            61, 246, 20, 54, 147, 238, 81, 239, 17, 33, 249, 223, 86, 215, 52, 193, 31, 66, 150, 209, 101, 109,
            104, 69, 253, 139, 13, 138, 14, 237, 150, 153, 62, 158, 239, 195, 164, 175, 155, 33, 76, 31, 203, 51,
            123, 189, 160, 31, 209, 142, 11, 223, 171, 141, 252, 48, 89, 151, 15, 7, 20, 149, 181, 195, 220, 122,
            3, 253, 146, 141, 49, 181, 115, 207, 182, 127, 209, 57, 193, 38, 72, 202, 235, 226, 91, 217, 138, 209,
            20, 128, 154, 151, 202, 140, 121, 123, 21, 162, 82, 35, 56, 110, 162, 138, 31, 185, 115, 208, 130,
            16, 224, 52, 60, 225, 25, 87, 195, 46, 90, 198, 77, 221, 106, 182, 145, 113, 254, 130, 244, 138, 200,
            28, 72, 145, 104, 81, 124, 123, 66, 122, 43, 34, 149, 27, 81, 79, 215, 39, 165, 9, 175, 53, 167, 201, 191,
            244, 179, 78, 205, 12, 153, 246, 96, 134, 94, 152, 198, 229, 200, 64, 223, 139, 117, 19, 249, 166,
            117, 65, 238, 252, 143, 73, 243, 147, 218, 170, 4, 221, 48, 79, 135, 228, 230, 119, 88, 165, 147, 61,
            79, 73, 35, 108, 39, 95, 3, 246, 145, 112, 122, 83, 122, 77, 214, 37, 214, 48, 95, 66, 51, 45, 185, 47,
            144, 205, 143, 95, 82, 59, 80, 58, 47, 140, 186, 32, 87, 142, 43, 173, 194, 117, 30, 226, 152, 85, 198,
            116, 94, 1, 88, 134, 170, 152, 116, 29, 79, 136, 33, 191, 55, 163, 93, 192, 182, 147, 156, 111, 102,
            89, 60, 192, 55, 203, 89, 81, 109, 252, 20, 76, 253, 210, 9, 118, 111, 103, 227, 128, 211, 249, 105,
            184, 201, 166, 28, 13, 204, 88, 128, 129, 21, 234, 26, 244, 121, 121, 193, 191, 194, 206, 49, 15, 176,
            81, 134, 172, 213, 71, 185, 70, 252, 33, 155, 199, 61, 143, 53, 70, 192, 109, 205, 4, 185, 112, 11, 93,
            130, 104, 77, 245, 15, 138, 251, 242, 59, 134, 85, 136, 249, 63, 40, 132, 8, 215, 188, 187, 4, 11, 45,
            155, 169, 58, 28, 152, 103, 10, 249, 58, 86, 234, 48, 144, 246, 215, 169, 66, 140, 255, 38, 215, 79,
            225, 162, 167, 96, 177, 131, 75, 131, 142, 141, 52, 56, 27, 3, 237, 140, 105, 227, 205, 92, 25, 107,
            8, 84, 145, 148, 178, 226, 112, 107, 58, 235, 145, 90, 160, 21, 186, 150, 239, 5, 92, 172, 83, 226, 37,
            85, 78, 29, 171, 76, 32, 30, 152, 103, 235, 49, 45, 150, 73, 236, 36, 193, 185, 77, 165, 161, 124, 138,
            150, 84, 140, 75, 132, 6, 34, 80, 216, 63, 62, 14, 150, 58, 179, 200, 73, 217, 166, 17, 126, 202, 21,
            146, 16, 12, 144, 238, 87, 135, 96, 158, 202, 198, 201, 188, 90, 16, 44, 83, 246, 201, 239, 14, 119,
            181, 112, 109, 188, 105, 118, 19, 53, 221, 81, 107, 20, 18, 158, 147, 245, 86, 109, 52, 232, 147, 107,
            129, 90, 1, 140, 72, 156, 224, 78, 81, 245, 233, 124, 81, 89, 189, 229, 236, 243, 119, 182, 201, 235,
            102, 183, 91, 101, 187, 213, 58, 33, 199, 83, 254, 2, 136, 195, 44, 64, 223, 147, 183, 194, 103, 5, 42,
            40, 173, 69, 222, 79, 20, 225, 7, 158, 237, 49, 36, 173, 241, 228, 113, 129, 76, 17, 211, 240, 139,
            81, 199, 13, 4, 110, 147, 159, 249, 181, 218, 198, 118, 186, 113, 213, 204, 155, 31, 105, 117, 174, 252,
            251, 119, 124, 223, 63, 188, 17, 61, 44, 229, 17, 214, 166, 55, 98, 81, 201, 210, 75, 228, 68, 199,
            24, 130, 148, 65, 200, 129, 236, 87, 85, 196, 87, 30, 125, 150, 252, 251, 183, 216, 227, 207, 199, 179,
            30, 82, 29, 127, 116, 32, 157, 235, 38, 15, 43, 90, 120, 89, 73, 221, 91, 187, 151, 51, 1, 6, 30, 23,
            80, 185, 109, 73, 230, 15, 118, 25, 237, 92, 127, 77, 166, 55, 211, 237, 193, 195, 105, 231, 179, 105,
            19, 223, 154, 59, 207, 99, 46, 245, 164, 197, 48, 49, 36, 17, 221, 105, 31, 238, 127, 56, 49, 139, 231,
            207, 50, 130, 70, 206, 90, 64, 13, 254, 219, 80, 87, 60, 220, 206, 210, 38, 46, 80, 233, 163, 255, 6,
            130, 67, 216, 187, 54, 225, 243, 138, 128, 18, 231, 59, 14, 202, 39, 106, 182, 211, 149, 19, 181, 249,
            115, 14, 76, 62, 56, 92, 75, 186, 165, 229, 30, 234, 180, 35, 182, 78, 179, 42, 186, 172, 242, 165,
            135, 152, 41, 107, 101, 175, 136, 32, 141, 20, 203, 42, 233, 8, 168, 30, 55, 233, 254, 216, 71, 62, 95,
            85, 112, 5, 89, 208, 38, 141, 151, 119, 86, 3, 10, 111, 78, 240, 222, 224, 221, 50, 122, 59, 53, 177,
            113, 165, 126, 100, 121, 13, 74, 137, 138, 33, 83, 71, 46, 226, 76, 83, 11, 222, 10, 101, 239, 58, 154,
            1, 113, 51, 182, 90, 202, 242, 114, 15, 220, 112, 159, 108, 0, 69, 166, 20, 81, 2, 202, 161, 80, 133,
            89, 231, 107, 135, 254, 172, 68, 41, 49, 222, 45, 85, 94, 109, 118, 147, 179, 24, 122, 181, 167, 216,
            78, 232, 14, 254, 251, 14, 206, 202, 22, 182, 129, 70, 75, 10, 110, 157, 204, 147, 151, 48, 30, 118,
            195, 116, 241, 200, 201, 199, 151, 135, 252, 100, 163, 49, 27, 18, 73, 33, 110, 173, 234, 72, 227, 94,
            230, 69, 230, 248, 1, 56, 165, 173, 79, 135, 123, 6, 199, 193, 243, 222, 112, 92, 6, 246, 178, 227, 87,
            170, 30, 115, 27, 168, 0, 245, 175, 179, 2, 183, 110, 93, 54, 210, 154, 253, 49, 35, 172, 33, 211, 8,
            236, 248, 62, 118, 170, 64, 42, 17, 105, 182, 163, 175, 200, 31, 150, 104, 48, 170, 101, 4, 27, 124,
            231, 24, 200, 200, 55, 91, 231, 85, 21, 167, 133, 198, 137, 67
    };
    const uint16_t input_len = 2500;

    bool overall_result = monobit_test(input, input_len);
    overall_result = overall_result && longest_series_len_test(input, input_len);
    overall_result = overall_result && poker_test(input, input_len);
    overall_result = overall_result && series_len_test(input, input_len);

    std::cout << std::endl << "=== [OVERALL RESULT] ===" << std::endl << (overall_result ? "PASSED" : "NOT PASSED")
              << std::endl;


    delete[] input;
    return 0;
}
